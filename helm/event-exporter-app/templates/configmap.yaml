apiVersion: v1
kind: ConfigMap
metadata:
  name: event-exporter-app
  namespace: giantswarm
data:
  config.yaml: |
    logLevel: debug

    {{ if .Values.Installation.V1.Secret.EventExporterApp }}
    # We do not have webhooks configured on all Control Planes since they are
    # part of an optional feature, which is sending Kubernetes Events to Slack.
    # In case the webhook is not present Helm cannot template the configmap
    # properly. Therefore we do not configure any matchers nor receivers if
    # there is no webhook configured for a given Control Plane.

    route:
      routes:

        # We want to send Tenant Cluster upgrade events to Slack via the webhook
        # receiver. Therefore we match for events attached to the CAPI Cluster
        # CRs.
        - match:
          - apiversion: "cluster.x-k8s.io/v1alpha2"
            kind: "Cluster"
            reason: "ClusterIsUpdating"
            receiver: "webhook"

        # We want to ignore all other events once we handled the events we are
        # actually interested in. Therefore the drop rule has to be evaluated at
        # the end of the tree.
        - drop:
          - namespace: "*"

    receivers:

      - name: "webhook"
        webhook:
          endpoint: "{{ .Values.Installation.V1.Secret.EventExporterApp.Slack.Webhook }}"
          layout:
            text: "Tenant Cluster upgrade got triggered for {{ "{{" }} .InvolvedObject.Namespace {{ "}}" }}/{{ "{{" }} .InvolvedObject.Name {{ "}}" }} on {{ .Values.Installation.V1.Name }}."

      - name: "grafana"
        webhook:
          endpoint: "https://giantswarm.grafana.net/api/annotations/graphite"
          headers:
            Accept: application/json
            Content-Type: application/json
            Authorization: "{{ .Values.Installation.V1.Secret.EventExporterApp.Grafana.Token }}"
          layout:
            what: "{{ .InvolvedObject.Kind }} - {{ .Reason }}"
            tags: ["{{ .Reason }}","{{ .Type }}","{{ .InvolvedObject.Kind }}","{{ .InvolvedObject.Name }}","{{ .Values.Installation.V1.Name }}","{{ .Values.Installation.V1.Customer }}","{{ .Source.Component }}"]
            when: "{{ .GetTimestampMs }}"
            data: "{{ .Message }} for {{ .InvolvedObject.Kind }} {{ .InvolvedObject.Namespace }}/{{ .InvolvedObject.Name }} on {{ .Values.Installation.V1.Name }} reported by {{ .Source.Component }} at {{ .GetTimestampMs }}"
    {{ end }}
